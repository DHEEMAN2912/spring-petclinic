name: Combined Pipeline

on:
  push:
    branches:
      - test
  workflow_dispatch:

jobs:
  build-and-scan:
    runs-on: ubuntu-latest
    container:
      image: dheeman29/new_image:v3
    outputs:
      image_sha: ${{ steps.get_image_sha.outputs.image_sha }}
      
    permissions:
      security-events: write
      id-token: write
      contents: read
      attestations: write
      packages: write

    steps:
     - uses: actions/checkout@v4

     # Step 1: Capture SHA256 ID of the Image
     - name: Capture SHA256 ID of the Image
       run: |          
          REPO_DIGESTS=$(docker inspect --format='{{.RepoDigests}}' dheeman29/new_image:v3) 
          if [ "$REPO_DIGESTS" == "[]" ]; then
              echo "Error: RepoDigests is empty. Cannot retrieve SHA256."
              exit 1
          fi
          CONTAINER_SHA256=$(docker inspect --format='{{index .RepoDigests 0}}' dheeman29/new_image:v3 | sed 's/.*@sha256://')
          echo "CONTAINER_SHA256=$CONTAINER_SHA256" >> $GITHUB_ENV

     # Step 2: Verify Container SHA256 ID        
     - name: Verify Container SHA256 ID        
       run: |          
          EXPECTED_SHA256="${{ secrets.EXPECTED_SHA256 }}"
          ACTUAL_SHA256="${{ env.CONTAINER_SHA256 }}"
          
          if [ "$EXPECTED_SHA256" != "$ACTUAL_SHA256" ]; then
              echo "SHA256 mismatch. Aborting."
              exit 1
          fi
          echo "SHA256 ID verified successfully."
     
     # Step 3: Install Tools
     - name: Install Tools
       run: |
          chmod +x ./install_dependencies/install_tools.sh
          source ./install_dependencies/install_tools.sh
    
     # Step 4: Run Build Script
     - name: Run Build Script
       run: |
          chmod +x ./build/build_script.sh
          ./build/build_script.sh
          
     # Step 5: Log in to GitHub Container Registry
     - name: Log in to GitHub Container Registry
       uses: docker/login-action@v2
       with:
          username: ${{ secrets.CR_Username }}
          password: ${{ secrets.CR_Password }}
          registry: ghcr.io

     # Step 6: Tag Docker Image
     - name: Tag Docker Image
       run: |
         docker tag docker.io/library/spring-petclinic:3.3.0-SNAPSHOT ghcr.io/dheeman2912/spring-petclinic:v1

     # Step 7: Push Docker Image
     - name: Push Docker Image
       run: |
          docker push ghcr.io/dheeman2912/spring-petclinic:v1
          docker inspect ghcr.io/dheeman2912/spring-petclinic:v1

     # Step 8: Get SHA256 of the Pushed Docker Image
     - name: Get SHA256 of Docker Image
       id: get_image_sha
       run: |
          IMAGE_SHA=$(docker inspect --format='{{index .RepoDigests 0}}' ghcr.io/dheeman2912/spring-petclinic:v1 | cut -d'@' -f2)
          echo "IMAGE_SHA=$IMAGE_SHA" >> $GITHUB_ENV
          echo "::set-output name=image_sha::$IMAGE_SHA"

     # Step 10: Scan Docker Image with Trivy
     - name: Scan Docker Image with Trivy
       run: |
          trivy image ghcr.io/dheeman2912/spring-petclinic:v1

     # Step 11: Sign Docker Image
     - name: Sign Docker Image
       run: |
          echo "${{ secrets.COSIGN_KEY }}" | tr -d '\r' > cosign.key
          chmod 600 cosign.key
          cosign sign --key cosign.key ghcr.io/dheeman2912/spring-petclinic@${{ env.IMAGE_SHA }} --yes
       env:
          COSIGN_KEY: ${{ secrets.COSIGN_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSPHRASE }}

     # Step 12: Public Key Creation
     - name: Public Key Creation
       run: |
          cosign public-key --key env://COSIGN_KEY > cosign.pub
       env:
          COSIGN_KEY: ${{ secrets.COSIGN_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSPHRASE }}
        
     # Step 13: Verify Docker Image Signature
     - name: Verify Docker Image Signature
       run: |
          cosign verify --key cosign.pub ghcr.io/dheeman2912/spring-petclinic@${{ env.IMAGE_SHA }} | jq .

     # Step 14: Attach SBOM
     - name: Attach SBOM
       run: |
          set -e
          output=$(cosign attach sbom --sbom sbom.json ghcr.io/dheeman2912/spring-petclinic@${{ env.IMAGE_SHA }} 2>&1) || { echo "Failed to run cosign attach sbom"; exit 1; }
          echo "cat output --> showing output below"
          echo "output: $output"
          sbom_filename=$(echo "$output" | grep -oP 'sha256-[\w\d]+\.sbom') || { echo "Failed to extract SBOM filename"; exit 1; }
          if [ -z "$sbom_filename" ]; then
            echo "Error: No SBOM filename found in the output"
            exit 1
          fi
          echo "SBOM_FILENAME=$sbom_filename" >> $GITHUB_ENV

     # Step 15: Sign the SBOM attached with the Image
     - name: Sign the SBOM attached with the Image
       run: |
          set -e
          if [ -z "$SBOM_FILENAME" ]; then
            echo "Error: SBOM_FILENAME environment variable is not set"
            exit 1
          fi
          echo "Signing SBOM with filename: $SBOM_FILENAME"
          cosign sign --key env://COSIGN_KEY ghcr.io/dheeman2912/spring-petclinic:$SBOM_FILENAME --yes || { echo "Failed to sign with SBOM"; exit 1; }
       env:
          COSIGN_KEY: ${{ secrets.COSIGN_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSPHRASE }}

     # Step 16: Verify Sign of SBOM attached with the Image
     - name: Verify Sign of SBOM attached with the Image
       run: |
          set -e
          cosign verify --key cosign.pub ghcr.io/dheeman2912/spring-petclinic:$SBOM_FILENAME | jq .

     # Step 17: Directly attest SBOM with the Image
     - name: Directly attest SBOM with the Image
       run: |
          set -e
          output=$(cosign attest --key env://COSIGN_KEY --predicate sbom.json ghcr.io/dheeman2912/spring-petclinic@${{ env.IMAGE_SHA }} --yes 2>&1) || { echo "Failed to attest sbom with the image"; exit 1; }
          echo "output: $output"
       env:
          COSIGN_KEY: ${{ secrets.COSIGN_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSPHRASE }}

     # Step 18: Verify the attested Image
     - name: Verify the attested Image
       run: |
          set -e
          output1=$(cosign verify-attestation --key cosign.pub ghcr.io/dheeman2912/spring-petclinic@${{ env.IMAGE_SHA }} | jq . 2>&1) || { echo "Failed to verify the attested image"; exit 1; }
          echo "output: $output1"

     # Step 19: Sign SBOM
     - name: Sign SBOM
       run: |
          cosign sign-blob --yes --key env://COSIGN_KEY sbom.json --bundle cosign.bundle 2>&1
       env:
          COSIGN_KEY: ${{ secrets.COSIGN_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSPHRASE }}

     # Step 20: Set Git safe directory
     - name: Set Git safe directory
       run: git config --global --add safe.directory /__w/spring-petclinic/spring-petclinic

     - name: Fetch commit details
       run: |
          # Get the commit ID
          COMMIT_ID=$(git rev-parse HEAD)
          # Get the branch name
          BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
          # Get the author name and email
          AUTHOR_NAME=$(git log -1 --pretty=format:'%an')
          AUTHOR_EMAIL=$(git log -1 --pretty=format:'%ae')
          # Get the pull request number from GitHub context if it's a PR
          if [ -n "${{ github.event.pull_request.number }}" ]; then
            PR_NUMBER="${{ github.event.pull_request.number }}"
          else
            PR_NUMBER="Not applicable"
          fi
          # Get the GitHub repository URL
          REPO_URL="https://github.com/${{ github.repository }}"
          # Create JSON output
          OUTPUT=$(jq -n \
            --arg commit_id "$COMMIT_ID" \
            --arg author_name "$AUTHOR_NAME" \
            --arg author_email "$AUTHOR_EMAIL" \
            --arg branch "$BRANCH_NAME" \
            --arg uri "$REPO_URL" \
            '{
              commit_id: $commit_id,
              author_name: $author_name,
              author_email: $author_email,
              branch: $branch,
              uri: $uri
            }')
          # Save JSON output to a file
          echo "$OUTPUT" > output.json
          # Print the contents of the JSON file
          cat output.json
          
     - name: Upload JSON file
       uses: actions/upload-artifact@v3
       with:
          name: git-details
          path: output.json
    
     - name: Extract commit ID
       id: extract_commit_id
       run: |
          COMMIT_ID=$(jq -r '.commit_id' output.json)
          echo "COMMIT_ID=$COMMIT_ID" >> $GITHUB_ENV
              

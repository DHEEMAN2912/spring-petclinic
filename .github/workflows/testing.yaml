name: DevSecOps Pipelinee

on:
  push:
    branches:
      - test
  workflow_dispatch:

env:
  SBOM_FILE: sbom.json
  SOURCE_DIR: .  
  OUTPUT_FORMAT: cyclonedx-json
  OWNER: ${{ secrets.OWNER_NAME }} 
  GH_TOKEN: ${{ secrets.CR_PASSWORD }}
  LOG_FILE: "trivy_scan_results.log"
  IMAGE_SHA256: ${{ secrets.EXPECTED_SHA256 }}
  
jobs:
  build-and-scan:
    runs-on: ubuntu-22.04
    container:
      image: dheeman29/agent-image:v1
      
    permissions:
      security-events: write
      id-token: write
      contents: read
      attestations: write
      packages: write

    steps:
     
     - name: Checkout Code
       uses: actions/checkout@v4

     - name: Capture SHA256 ID of the Image
       id: capture_sha256
       run: |          
          REPO_DIGESTS=$(docker inspect --format='{{.RepoDigests}}' dheeman29/agent-image:v1) 
          if [ "$REPO_DIGESTS" == "[]" ]; then
              echo "Error: RepoDigests is empty. Cannot retrieve SHA256."
              exit 1
          fi
          CONTAINER_SHA256=$(docker inspect --format='{{index .RepoDigests 0}}' dheeman29/agent-image:v1 | sed 's/.*@sha256://')
          echo "CONTAINER_SHA256=$CONTAINER_SHA256" >> $GITHUB_ENV

     # Step 2: Verify Container SHA256 ID        
     - name: Verify Container SHA256 ID        
       id: verify_sha256
       run: |          
          EXPECTED_SHA256="${{ secrets.EXPECTED_SHA256 }}"
          ACTUAL_SHA256="${{ env.CONTAINER_SHA256 }}"
          
          if [ "$EXPECTED_SHA256" != "$ACTUAL_SHA256" ]; then
              echo "Error: SHA256 mismatch. Aborting."
              exit 1
          fi
          echo "SHA256 ID verified successfully."
     

     # - name: Log in to DockerHub
     #   run: |
     #    echo "Logging into DockerHub..."
     #    echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin


     # - name: Runing Application in Container
     #   run: |
     #     docker run --rm \
     #       -v ${{ github.workspace }}:/workspace \
     #       -w /workspace \
     #       ${{ secrets.CONTAINER_IMAGE_REGISTRY }}/${{ secrets.CONTAINER_IMAGEE_NAME }}@sha256:${{ env.IMAGE_SHA256 }} bash -c "
     #       echo 'Running application inside container...';"

     - name: Get Git Details
       run: |
         echo "Fetching Git repository details..."
         echo "Repository URL: $GITHUB_REPOSITORY_URL"
         echo "Branch: $GITHUB_REF"
         echo "Commit ID: $(git rev-parse HEAD)"
         echo "Author Name: $(git log -1 --pretty=format:'%an')"
         echo "Checking for changes..."
         git log -1 --stat
     
     # Step 3: Install Necessary Tools and Dependencies
     - name: Install Necessary Tools and Dependencies
       id: install_tools_and_dependencies
       run: |
        chmod +x ./install_dependencies/install_tools.sh
    
        echo "Starting tool installation..."
        {
          ./install_dependencies/install_tools.sh
        } || {
          echo "Error: Tool installation failed."
          exit 1
        }
        
        echo "Tool installation completed successfully."

     # Step 3: Build with Maven Wrapper
     - name: Build with Maven Wrapper
       run: |
        echo "Starting Build with Maven Wrapper..."
        chmod +x ./build/build_maven.sh
        ./build/build_maven.sh
        if [ $? -ne 0 ]; then
          echo "Error: Maven build process failed. Please check the logs."
          exit 1
        else
          echo "Maven build completed successfully."
        fi
        # Display the logs
        echo "Build logs:"
        cat build.log

      # Step 6: Generate SBOM with Syft
     - name: Generate SBOM with Syft
       run: |
          echo "Starting SBOM generation with Syft..."
          syft dir:${SOURCE_DIR} -o ${OUTPUT_FORMAT} > ${SBOM_FILE}
          
          # Check if the SBOM generation was successful
          if [ $? -ne 0 ]; then
            echo "Error: Failed to generate SBOM with Syft."
            exit 1
          else
            echo "SBOM generated successfully and saved to ${SBOM_FILE}."
          fi


      # Step 7: Upload SBOM
     - name: Upload SBOM
       id: upload_sbom  
       uses: actions/upload-artifact@v4
       with:
        name: sbom
        path: ${{ env.SBOM_FILE }}

    # Check if the upload was successful
     - name: Check SBOM Upload Status
       run: |
        if [ "${{ steps.upload_sbom.outcome }}" = "success" ]; then
          echo "SBOM file uploaded successfully."
        else
          echo "Error: Failed to upload SBOM file."
          exit 1
        fi

      # Step 10: Generate SBOM attestation
     - name: Generate SBOM attestation
       id: attest_sbom
       uses: actions/attest-sbom@v1
       with:
          subject-path: ${{ env.SBOM_FILE }}  
          sbom-path: ${{ env.SBOM_FILE }}  
          
     - name: Check SBOM attestation result
       run: |
        echo "Checking SBOM attestation result..."
        # Check if the attest_sbom step was successful
        if [ "${{ steps.attest_sbom.outcome }}" != "success" ]; then
          echo "Error: SBOM attestation failed."
          exit 1
        else
          echo "SBOM attestation completed successfully."
        fi

      # Step 11: Verify SBOM attestation
     - name: Verify SBOM attestation
       run: |
          echo "Starting SBOM attestation verification for ${SBOM_FILE}..."
          if gh attestation verify ./${{ env.SBOM_FILE }} --owner ${{ env.OWNER }} --format=json | jq .; then
            echo "Success: SBOM attestation verification completed successfully."
          else
            echo "Error: SBOM attestation verification failed."
            exit 1
          fi

      # Step 12: Build Application Docker Image using Maven
     - name: Build Application Docker Image using Maven
       run: |
          chmod +x ./build/dockerfile_build.sh
          if ./build/dockerfile_build.sh; then
            echo "Success: Docker image built successfully."
          else
            echo "Error: Docker image build failed."
            exit 1
          fi


     # Step 5: Log in to GitHub Container Registry
     - name: Log in to GitHub Container Registry
       id: login_registry
       uses: docker/login-action@v2
       with:
          username: ${{ secrets.CR_Username }}
          password: ${{ secrets.CR_Password }}
          registry: ghcr.io
          

     # Step 6: Scan Docker Image with Trivy and Upload the result
     - name: Scan Application Docker Image with Trivy
       id: scan_docker_image
       run: |
         trivy image "${{ secrets.IMAGE_NAME }}:${{ secrets.IMAGE_VERSION }}" > ${{ env.LOG_FILE }} || { echo "Error: Trivy scan failed"; exit 1; }
         echo "Trivy scan completed. Results saved to ${{ env.LOG_FILE }}"

     - name: Upload Trivy Scan Results
       uses: actions/upload-artifact@v3
       with:
        name: trivy-scan-results
        path: ${{ env.LOG_FILE }}

     
     - name: Tag Docker Image
       id: tag_docker_image
       run: |
        # Define variables from secrets
        IMAGE_TAG="${{ secrets.IMAGE_TAG }}"          
        IMAGE_NAME="${{ secrets.IMAGE_NAME }}"       
        IMAGE_VERSION="${{ secrets.IMAGE_VERSION }}" 
    
        # Tag the Docker image
        if docker tag "$IMAGE_TAG" "$IMAGE_NAME:$IMAGE_VERSION"; then
          echo "Success: Docker image tagged successfully."
        else
          echo "Error: Tagging Docker image failed."
          exit 1
        fi  
         

       # Step 8:Push Docker Image to Github Container Registry
     - name: Push Application Docker Image to GitHub Container Registry
       id: push_docker_image
       run: |
          if docker push ${{ secrets.IMAGE_NAME }}:${{ secrets.IMAGE_VERSION}}; then
            echo "Success: Docker image pushed successfully."
          else
            echo "Error: Pushing Docker image failed."
            exit 1
          fi

      # Step 9: Get SHA256 of the Pushed Docker Image
     - name: Get SHA256 ID of Application Docker Image
       id: get_image_sha
       run: |
          IMAGE_SHA=$(docker inspect --format='{{index .RepoDigests 0}}' ${{ secrets.IMAGE_NAME }}:${{ secrets.IMAGE_VERSION }} | cut -d'@' -f2)
          echo "IMAGE_SHA=$IMAGE_SHA" >> $GITHUB_ENV
          echo "::set-output name=image_sha::$IMAGE_SHA"


     # Step 10: Sign Docker Image
     - name: Sign Docker Image
       id: sign_docker_image
       run: |
          echo "${{ secrets.COSIGN_KEY }}" | tr -d '\r' > cosign.key
          chmod 600 cosign.key
          
          if cosign sign --key cosign.key ${{ secrets.IMAGE_NAME }}@${{ env.IMAGE_SHA }} --yes; then
            echo "Success: Docker image signed successfully."
          else
            echo "Error: Signing Docker image failed."
            exit 1
          fi
       env:
          COSIGN_KEY: ${{ secrets.COSIGN_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSPHRASE }}

     - name: Public Key Creation
       id: create_public_key
       run: |
        if cosign public-key --key env://COSIGN_KEY > cosign.pub; then
          echo "Success: Cosign Public Key created successfully."
        else
          echo "Error: Cosign Public Key creation failed."
          exit 1
        fi   
       env:
        COSIGN_KEY: ${{ secrets.COSIGN_KEY }}
        COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSPHRASE }}


     - name: Attach SBOM with Application Docker Image
       id: attach_sbom
       run: |
        set -e
        echo "Attaching SBOM to the Docker image..."
        output=$(cosign attach sbom --sbom ${{ env.SBOM_FILE }} ${{ secrets.IMAGE_NAME }}@${{ env.IMAGE_SHA }} 2>&1) || {
          echo "Error: Failed to run cosign attach sbom."
          echo "Output: $output"
          exit 1
        }
    
        echo "Success: SBOM attached successfully."
        echo "Command output:"
        echo "$output"
    
        # Extract SBOM filename from the output
        sbom_filename=$(echo "$output" | grep -oP 'sha256-[\w\d]+\.sbom') || {
          echo "Error: Failed to extract SBOM filename."
          echo "Output: $output"
          exit 1
        }
    
        # Check if sbom_filename is empty
        if [ -z "$sbom_filename" ]; then
          echo "Error: No SBOM filename found in the output."
          echo "Output: $output"
          exit 1
        fi
    
        echo "Success: SBOM filename extracted: $sbom_filename."
    
        # Extract the SHA from the SBOM filename
        sbom_sha=$(echo "$sbom_filename" | cut -d'-' -f2) 
        echo "SBOM SHA: $sbom_sha"
    
        # Store the SBOM filename and SHA as environment variables for later use
        echo "SBOM_FILENAME=$sbom_filename" >> $GITHUB_ENV
        echo "SBOM_SHA=$sbom_sha" >> $GITHUB_ENV


     # Step 14: Sign the SBOM attached with the Image
     - name: Sign the SBOM attached with the Image
       id: sign_sbom
       run: |
          set -e
          if [ -z "$SBOM_FILENAME" ]; then
            echo "Error: SBOM_FILENAME environment variable is not set"
            exit 1
          fi
          echo "Signing SBOM with filename: $SBOM_FILENAME"
          cosign sign --key env://COSIGN_KEY ${{ secrets.IMAGE_NAME }}:$SBOM_FILENAME --yes && { echo "Success: SBOM created successfully"; } || { echo "Error: Failed to sign with SBOM"; exit 1; }

       env:
          COSIGN_KEY: ${{ secrets.COSIGN_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSPHRASE }}

     # Step 15: Verify Sign of SBOM attached with the Image
     - name: Verify Sign of SBOM attached with the Image
       id: verify_sbom_signature
       run: |
          set -e
          cosign verify --key cosign.pub ${{ secrets.IMAGE_NAME }}:$SBOM_FILENAME | jq . && { echo "Success: Verification of SBOM signature succesfull"; } || { echo "Error: Verification of SBOM signature failed"; exit 1; }

     # Step 16: Directly attest SBOM with the Image
     - name: Directly attest SBOM with the Image
       id: attestt_sbom
       run: |
          set -e
          output=$(cosign attest --key env://COSIGN_KEY --predicate sbom.json ${{ secrets.IMAGE_NAME }}@${{ env.IMAGE_SHA }} --yes 2>&1) && { echo "Success: Attest SBOM with the image succesfull"; } || { echo "Error: Failed to attest SBOM with the image"; exit 1; }
          echo "output: $output"
       env:
          COSIGN_KEY: ${{ secrets.COSIGN_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSPHRASE }}

     # Step 17: Verify the attested Image
     - name: Verify the attested Image
       id: verify_attested_image
       run: |
          set -e
          output1=$(cosign verify-attestation --key cosign.pub ${{ secrets.IMAGE_NAME }}@${{ env.IMAGE_SHA }} | jq . 2>&1) && { echo "Success: verify the attested image is  succesfull"; } || { echo "Error: Failed to verify the attested image"; exit 1; }
          echo "output: $output1"

     # Step 18: Sign SBOM
     - name: Sign SBOM
       id: sign_sbom_blob
       run: |
          cosign sign-blob --yes --key env://COSIGN_KEY sbom.json --bundle cosign.bundle 2>&1 && { echo "Success: Signing SBOM is succesfull"; } || { echo "Error: Signing SBOM failed"; exit 1; }
       env:
          COSIGN_KEY: ${{ secrets.COSIGN_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSPHRASE }}


     # Step 19: Set Git safe directory
     - name: Set Git Safe Directory
       id: set_git_safe_directory
       run: git config --global --add safe.directory /__w/spring-petclinic/spring-petclinic

     # Step 20: Fetch Commit Details
     - name: Fetch Commit Details
       id: fetch_commit_details
       run: |
          # Get the commit ID
          COMMIT_ID=$(git rev-parse HEAD)
          # Get the branch name
          BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
          # Get the author name and email
          AUTHOR_NAME=$(git log -1 --pretty=format:'%an')
          AUTHOR_EMAIL=$(git log -1 --pretty=format:'%ae')
          # Get the pull request number from GitHub context if it's a PR
          if [ -n "${{ github.event.pull_request.number }}" ]; then
            PR_NUMBER="${{ github.event.pull_request.number }}"
          else
            PR_NUMBER="Not applicable"
          fi
          # Get the GitHub repository URL
          REPO_URL="https://github.com/${{ github.repository }}"
          
          # Fetch the SBOM SHA from cosign bundle (assuming the SBOM SHA is stored or signed)
          SBOM_SHA=$(cosign upload blob -f cosign.bundle ${{ secrets.IMAGE_NAME }}@${{ env.IMAGE_SHA }} 2>&1 | grep -oP 'sha256:[\w\d]{64}' | head -n 1)
          # Create JSON output
          OUTPUT=$(jq -n \
            --arg commit_id "$COMMIT_ID" \
            --arg author_name "$AUTHOR_NAME" \
            --arg author_email "$AUTHOR_EMAIL" \
            --arg branch "$BRANCH_NAME" \
            --arg uri "$REPO_URL" \
            '{
              commit_id: $commit_id,
              author_name: $author_name,
              author_email: $author_email,
              branch: $branch,
              uri: $uri
            }')
          # Save JSON output to a file
          echo "$OUTPUT" > output.json
          # Print the contents of the JSON file
          cat output.json   

    # Step 8: Attestation using Predicate
     - name: Attest Image using Predicate
       run: |
        cosign attest --key env://COSIGN_KEY --predicate output.json --type https://example.com/CodeReview/v1 ${{ secrets.IMAGE_NAME }}@${{ env.IMAGE_SHA }} --yes || { echo "Error: Failed to attest predicate with the image"; exit 1; }
       shell: bash
       env:
        COSIGN_KEY: ${{ secrets.COSIGN_KEY }}
        COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSPHRASE }}

    # Step 9: Verify Predicate Attestation
     - name: Verify Predicate Attestation
       run: |
        cosign verify-attestation --type https://example.com/CodeReview/v1 --certificate-github-workflow-name=.github/workflows/cicd.yml@refs/heads/testing --certificate-github-workflow-ref=refs/heads/testing --certificate-github-workflow-repository=https://github.com/dheeman2912/spring-petclinic --certificate-github-workflow-trigger=push --key cosign.pub ${{ secrets.IMAGE_NAME }}@${{ env.IMAGE_SHA }} | jq -r .payload | base64 --decode | jq . || { echo "Error: Predicate attestation verification failed"; exit 1; }
       shell: bash

    # Step 8: Verify the AKS Cluster via Managed Identity
     - name: Verify the AKS Cluster via Managed Identity
       run: |
         CLUSTER_MANAGED_ID=$(az aks show --resource-group ${{ secrets.RESOURCE_GROUP }} --name ${{ secrets.CLUSTER_NAME }} --query identity.principalId --output tsv) || { echo "Failed to fetch Managed Identity"; exit 1; }
        
         EXPECTED_MANAGED_ID="${{ secrets.EXPECTED_MANAGED_ID }}"
        
         if [[ "$EXPECTED_MANAGED_ID" != "$CLUSTER_MANAGED_ID" ]]; then
          echo "Error: Managed Identity does not match. Aborting deployment."
          exit 1
         else
          echo "Managed Identity verified successfully."
         fi

   # Step 7: Download kubeconfig file
     - name: Download kubeconfig file
       run: |
          if az aks get-credentials --resource-group ${{ secrets.RESOURCE_GROUP }} --name ${{ secrets.CLUSTER_NAME }} --admin --overwrite-existing; then
            echo "Kubeconfig downloaded successfully."
          else
            echo "Error: Failed to download kubeconfig file."
            exit 1
          fi


    # Step 10: Deploy to AKS
     - name: Deploy to AKS
       run: |
         if kubectl apply -f K8s/deployment.yaml; then
          echo "Deployment applied successfully."
         else
          echo "Error deploying application."
          exit 1
         fi
         if kubectl apply -f K8s/service.yaml; then
          echo "Service applied successfully."
         else
          echo "Error deploying service."
          exit 1
         fi


  #     - name: Download artifact
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: trivy-scan-results
 
  #     - name: Send email with artifact
  #       env:
  #         EMAIL_USER: ${{ secrets.EMAIL_USER }}      # Your email
  #         EMAIL_PASS: ${{ secrets.EMAIL_PASS }}      # Your email password or API key
  #         RECIPIENTS: dheeman.das@pwc.com,saurav.d.kumar@pwc.com  # Comma-separated list of recipients
  #       run: |
  #         # Install mailx or use a similar tool
  #         apt-get install -y mailutils
  #         # Create a temporary file for the email content
  #         echo "Please find the attached artifact." > email_body.txt
  #         # Send email with attachment
  #         echo "Sending email..."
  #         echo "Subject: Artifacts from GitHub Actions" | cat - email_body.txt | mail -a output/artifact.txt -s "Artifacts from CI" $RECIPIENTS

name: Combined Pipeline
on:
  push:
    branches:
      - test
  workflow_dispatch:

jobs:
  build-and-scan:
    runs-on: ubuntu-latest
    container:      
      image: dheeman29/new-cosign-image:v1

    permissions:
      security-events: write
      id-token: write
      contents: read
      attestations: write
      packages: write

    steps:
      # Step 1: Capture SHA256 ID of the Image
      - name: Capture SHA256 ID of the Image
        run: |          
          REPO_DIGESTS=$(docker inspect --format='{{.RepoDigests}}' dheeman29/new-cosign-image:v1) 
          if [ "$REPO_DIGESTS" == "[]" ]; then
              echo "Error: RepoDigests is empty. Cannot retrieve SHA256."
              exit 1
          fi
          CONTAINER_SHA256=$(docker inspect --format='{{index .RepoDigests 0}}' dheeman29/new-cosign-image:v1 | sed 's/.*@sha256://')
          echo "CONTAINER_SHA256=$CONTAINER_SHA256" >> $GITHUB_ENV

      # Step 2: Verify Container SHA256 ID        
      - name: Verify Container SHA256 ID        
        run: |          
          EXPECTED_SHA256="${{ secrets.EXPECTED_SHA256 }}"
          ACTUAL_SHA256="${{ env.CONTAINER_SHA256 }}"
          
          if [ "$EXPECTED_SHA256" != "$ACTUAL_SHA256" ]; then
              echo "SHA256 mismatch. Aborting."
              exit 1
          fi
          echo "SHA256 ID verified successfully."

      # Step 3: Checkout Code
      - uses: actions/checkout@v4

      # Step 4: Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: maven

      # Step 5: Install Syft for SBOM generation
      - name: Install Syft
        run: |
          curl -sSL https://github.com/anchore/syft/releases/download/v0.66.0/syft_0.66.0_linux_amd64.tar.gz | tar xz -C /usr/local/bin syft

      # Step 6: Generate SBOM with Syft
      - name: Generate SBOM with Syft
        run: |
          syft dir:. -o cyclonedx-json > sbom.json

      # Step 7: Upload SBOM
      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.json

      # Step 8: Set up GitHub CLI Repository
      - name: Set up GitHub CLI Repository
        run: |
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo gpg --dearmor -o /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt-get update

      # Step 9: Install GitHub CLI and jq
      - name: Install GitHub CLI and jq
        run: |
          sudo apt-get install -y gh jq

      # Step 10: Generate SBOM attestation
      - name: Generate SBOM attestation
        uses: actions/attest-sbom@v1
        with:
          subject-path: ./sbom.json
          sbom-path: ./sbom.json

      # Step 11: Verify SBOM attestation
      - name: Verify SBOM attestation
        env:
          GH_TOKEN: ${{ secrets.CR_Password }}
        run: |
          gh attestation verify ./sbom.json --owner dheeman2912 --format=json | jq .

      # Step 12: Build Docker Image using Maven
      - name: Build Docker Image
        run: ./mvnw clean spring-boot:build-image -Dmaven.test.skip=true

      # Step 13: Log in to GitHub Container Registry
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # Step 14: Tag Docker Image
      - name: Tag Docker Image
        run: |
         docker tag docker.io/library/spring-petclinic:3.3.0-SNAPSHOT dheeman29/spring-petclinic:latest

      # Step 15: Push Docker Image
      - name: Push Docker Image
        run: |
          docker push dheeman29/spring-petclinic:latest

      # # Step 16: Run Trivy Vulnerability Scanner
      # - name: Run Trivy Vulnerability Scanner
      #   uses: aquasecurity/trivy-action@7b7aa264d83dc58691451798b4d117d53d21edfe
      #   with:
      #     image-ref: 'ghcr.io/dheeman2912/spring-petclinic:latest'
      #     format: 'template'
      #     template: '@/contrib/sarif.tpl'
      #     output: 'trivy-results.sarif'
      #     severity: 'CRITICAL,HIGH'

      # # Step 17: Upload Trivy Scan Results to GitHub Security Tab
      # - name: Upload Trivy Scan Results to GitHub Security Tab
      #   uses: github/codeql-action/upload-sarif@v3
      #   with:
      #     sarif_file: 'trivy-results.sarif'

      # Step 18: Install Cosign CLI
      - name: Install Cosign CLI
        run: |
          curl -sSL -o /usr/local/bin/cosign https://github.com/sigstore/cosign/releases/download/v2.2.3/cosign-linux-amd64
          chmod +x /usr/local/bin/cosign
          cosign version

      # Step 19: Sign Docker Image
      - name: Sign Docker Image
        run: |
          echo "${{ secrets.COSIGN_KEY }}" | tr -d '\r' > cosign.key  # Ensure Windows line endings are handled
          chmod 600 cosign.key  # Set permissions to read/write only for the owner
          cosign sign --key cosign.key docker.io/dheeman29/spring-petclinic:latest --yes
        shell: bash
        env:
          COSIGN_KEY: ${{ secrets.COSIGN_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSPHRASE }}

      - name: Public Key Creation
        run: |
          cosign public-key --key env://COSIGN_KEY > cosign.pub
        shell: bash
        env:
          COSIGN_KEY: ${{secrets.COSIGN_KEY}}
          COSIGN_PASSWORD: ${{secrets.COSIGN_PASSPHRASE}}
        
      - name: Verify Docker Image Signature
        run: |
          cosign verify --key cosign.pub docker.io/dheeman29/spring-petclinic:latest | jq . #--insecure-ignore-tlog #--check-claims=false

      - name: Attach SBOM
        run: |
          set -e  # Exit on error
          # Run the cosign attach sbom command and capture its output
          output=$(cosign attach sbom --sbom sbom.json docker.io/dheeman29/spring-petclinic:latest 2>&1) || { echo "Failed to run cosign attach sbom"; exit 1; }
          echo "cat output --> showing output below"
          echo "output: $output"
          # Extract the SHA from the output
          sbom_filename=$(echo "$output" | grep -oP 'sha256-[\w\d]+\.sbom') || { echo "Failed to extract SBOM filename"; exit 1; }
          echo "sbom_filename: $sbom_filename"
          # Check if the extraction was successful
          if [ -z "$sbom_filename" ]; then
            echo "Error: No SBOM filename found in the output"
            exit 1
          fi
          # Set the extracted SHA as an environment variable
          echo "SBOM_FILENAME=$sbom_filename" >> $GITHUB_ENV

      - name: Sign the SBOM attached with the Image
        run: |
          set -e  # Exit on error
          # Use the environment variable to construct the command
          if [ -z "$SBOM_FILENAME" ]; then
            echo "Error: SBOM_FILENAME environment variable is not set"
            exit 1
          fi
          echo "Signing SBOM with filename: $SBOM_FILENAME"
          cosign sign --key env://COSIGN_KEY  docker.io/dheeman29/spring-petclinic:$SBOM_FILENAME --yes || { echo "Failed to sign with SBOM"; exit 1; }
        shell: bash
        env:
          COSIGN_KEY: ${{secrets.COSIGN_KEY}}
          COSIGN_PASSWORD: ${{secrets.COSIGN_PASSPHRASE}}

      - name: Verify Sign of SBOM attached with the Image
        run: |
          set -e  # Exit on error
          cosign verify --key cosign.pub docker.io/dheeman29/spring-petclinic:$SBOM_FILENAME | jq . || { echo "Failed to verify SBOM Sign"; exit 1; }

      - name: Directly attest SBOM with the Image
        run: |
          set -e  # Exit on error
          output=$(cosign attest --key env://COSIGN_KEY --predicate sbom.json docker.io/dheeman29/spring-petclinic:latest --yes 2>&1) || { echo "Failed to attest sbom with the image"; exit 1; }
          echo "output: $output"
        shell: bash
        env:
          COSIGN_KEY: ${{secrets.COSIGN_KEY}}
          COSIGN_PASSWORD: ${{secrets.COSIGN_PASSPHRASE}}

      - name: Verfiy the attested Image
        run: |
          set -e  # Exit on error
          output1=$(cosign verify-attestation --key cosign.pub docker.io/dheeman29/spring-petclinic:latest | jq . 2>&1) || { echo "Failed to verify the attested image"; exit 1; }
          echo "output: $output1"

      - name: Sign SBOM
        run: |
          cosign sign-blob --yes --key env://COSIGN_KEY sbom.json --bundle cosign.bundle 2>&1
        shell: bash
        env:
          COSIGN_KEY: ${{secrets.COSIGN_KEY}}
          COSIGN_PASSWORD: ${{secrets.COSIGN_PASSPHRASE}}

      - name: upload Signed SBOM to Docker Hub
        run: |
          output2=$(cosign upload blob -f cosign.bundle docker.io/dheeman29/spring-petclinic:latest 2>&1)
          echo "output: $output2"
          sbom_file=$(echo "$output2" | grep -oP 'sha256:[\w\d]{64}' | head -n 1) || { echo "Failed to extract SBOM filename"; exit 1; }
          echo "sbom_file: $sbom_file"

      - name: Verify SBOM Uploaded to Image Repo
        run: |
          cosign verify-blob sbom.json --bundle cosign.bundle --certificate-github-workflow-name=.github/workflows/cicd.yml@refs/heads/testing --certificate-github-workflow-ref=refs/heads/main --certificate-github-workflow-repository=https://github.com/dheeman2912/spring-petclinic --certificate-github-workflow-trigger=push --key cosign.pub 2>&1
        shell: bash
        env:
          COSIGN_KEY: ${{secrets.COSIGN_KEY}}
          COSIGN_PASSWORD: ${{secrets.COSIGN_PASSPHRASE}}

      - name: Set Git safe directory
        run: git config --global --add safe.directory /__w/spring-petclinic/spring-petclinic

      - name: Fetch commit details
        run: |
          # Get the commit ID
          COMMIT_ID=$(git rev-parse HEAD)
          # Get the branch name
          BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
          # Get the author name and email
          AUTHOR_NAME=$(git log -1 --pretty=format:'%an')
          AUTHOR_EMAIL=$(git log -1 --pretty=format:'%ae')
          # Get the pull request number from GitHub context if it's a PR
          if [ -n "${{ github.event.pull_request.number }}" ]; then
            PR_NUMBER="${{ github.event.pull_request.number }}"
          else
            PR_NUMBER="Not applicable"
          fi
          # Get the GitHub repository URL
          REPO_URL="https://github.com/${{ github.repository }}"
          # Create JSON output
          OUTPUT=$(jq -n \
            --arg commit_id "$COMMIT_ID" \
            --arg author_name "$AUTHOR_NAME" \
            --arg author_email "$AUTHOR_EMAIL" \
            --arg branch "$BRANCH_NAME" \
            --arg uri "$REPO_URL" \
            '{
              commit_id: $commit_id,
              author_name: $author_name,
              author_email: $author_email,
              branch: $branch,
              uri: $uri
            }')
          # Save JSON output to a file
          echo "$OUTPUT" > output.json
          # Print the contents of the JSON file
          cat output.json
      - name: Upload JSON file
        uses: actions/upload-artifact@v3
        with:
          name: git-details
          path: output.json
          
      - name:  Sbom_Upload
      - name: Check Out Source Code
        uses: actions/checkout@v3     
      - name: Download file artifact
        uses: actions/download-artifact@v4
        with:
         name: sbom
      - name: Download shell script from Gist
        run: |
           cat sbom.json 
           curl -o project_creation_sbom_upload.sh https://gist.githubusercontent.com/DHEEMAN2912/20e5a000b24e257181228c6b3c46c004/raw/755ef0f37f0edcaa93464713daf2866a8dadcc1d/project_creation_sbom_upload.sh     - name: Make the script executable
           run: chmod +x project_creation_sbom_upload.sh

      - name: Run the shell script
        run: ./project_creation_sbom_upload.sh -u ${{ secrets.URL_SCORE }} -t ${{ secrets.T_SCORE }} -p ${{ secrets.P_SCORE }} -v ${{ secrets.V_SCORE }}

      - name: vulnerability_score
      - name: Check Out Source Code
        uses: actions/checkout@v3     
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Download shell script from Gist
         run:|
          curl -o vulnerability_score.sh https://gist.githubusercontent.com/SachinManiyar/50c889020f611cc0e2bad3543396992a/raw/b13972079aa046ffc7ecbc4e49c9888d107718e6/vulnerability_score.sh
      - name: Make the script executable
        run: chmod +x vulnerability_score.sh

      - name: Run the shell script
        run: ./vulnerability_score.sh -u ${{ secrets.URL_SCORE }} -t ${{ secrets.T_SCORE }} -p ${{ secrets.P_SCORE }} -d ${{ secrets.D_SCORE }} -v ${{ secrets.V_SCORE }}

    


      
      - name:  Attest_Verify_Predicate
      - name: Check Out Source Code
        uses: actions/checkout@v3
      - name: Download output.json file artifact
        uses: actions/download-artifact@v3
        with:
          name: git-details

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # - name: Install Cosign CLI
      #   run: |
      #     curl -sSL -o /usr/local/bin/cosign https://github.com/sigstore/cosign/releases/download/v2.2.3/cosign-linux-amd64
      #     chmod +x /usr/local/bin/cosign
      #     cosign version


      # - name: Public Key Creation
      #   run: |
      #     cosign public-key --key env://COSIGN_KEY > cosign.pub
      #   shell: bash
      #   env:
      #     COSIGN_KEY: ${{secrets.COSIGN_KEY}}
      #     COSIGN_PASSWORD: ${{secrets.COSIGN_PASSPHRASE}}

      # - name: Attestation using Predicate
      #   run: |
      #     cosign attest --key env://COSIGN_KEY --predicate output.json docker.io/dheeman29/spring-petclinic:latest --yes
      #     # $(cosign attest --key env://COSIGN_KEY --predicate output.json docker.io/dheeman29/spring-petclinic:latest --yes 2>&1) || { echo "Failed to attest predicate with the image"; exit 1; }
      #     # $(cat output.json | cosign attest --predicate - docker.io/dheeman29/spring-petclinic:latest --yes 2>&1) || { echo "Failed to attest predicate with the image"; exit 1; }
      #   shell: bash
      #   env:
      #     COSIGN_KEY: ${{secrets.COSIGN_KEY}}
      #     COSIGN_PASSWORD: ${{secrets.COSIGN_PASSPHRASE}}

      # - name: Verify Predicate Attestation
      #   run: |
      #     cosign verify-attestation --certificate-github-workflow-name=.github/workflows/cicd.yml@refs/heads/testing --certificate-github-workflow-ref=refs/heads/testing --certificate-github-workflow-repository=https://github.com/dheeman2912/spring-petclinic --certificate-github-workflow-trigger=push --key cosign.pub docker.io/dheeman29/spring-petclinic:latest | jq -r .payload | base64 --decode | jq .

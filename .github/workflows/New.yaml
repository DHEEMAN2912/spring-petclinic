name: Combined Pipeline
on:
  push:
    branches:
      - test
  workflow_dispatch:

jobs:
  build-and-scan:
    runs-on: ubuntu-latest
    container:      
      image: dheeman29/new-cosign-image:v1

    permissions:
      security-events: write
      id-token: write
      contents: read
      attestations: write
      packages: write

    steps:
      # Step 1: Capture SHA256 ID of the Image
      - name: Capture SHA256 ID of the Image
        run: |          
          REPO_DIGESTS=$(docker inspect --format='{{.RepoDigests}}' dheeman29/new-cosign-image:v1) 
          if [ "$REPO_DIGESTS" == "[]" ]; then
              echo "Error: RepoDigests is empty. Cannot retrieve SHA256."
              exit 1
          fi
          CONTAINER_SHA256=$(docker inspect --format='{{index .RepoDigests 0}}' dheeman29/new-cosign-image:v1 | sed 's/.*@sha256://')
          echo "CONTAINER_SHA256=$CONTAINER_SHA256" >> $GITHUB_ENV

      # Step 2: Verify Container SHA256 ID        
      - name: Verify Container SHA256 ID        
        run: |          
          EXPECTED_SHA256="${{ secrets.EXPECTED_SHA256 }}"
          ACTUAL_SHA256="${{ env.CONTAINER_SHA256 }}"
          
          if [ "$EXPECTED_SHA256" != "$ACTUAL_SHA256" ]; then
              echo "SHA256 mismatch. Aborting."
              exit 1
          fi
          echo "SHA256 ID verified successfully."

      # Step 3: Checkout Code
      - uses: actions/checkout@v4

      # Step 4: Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: maven

      # Step 5: Install Syft for SBOM generation
      - name: Install Syft
        run: |
          curl -sSL https://github.com/anchore/syft/releases/download/v0.66.0/syft_0.66.0_linux_amd64.tar.gz | tar xz -C /usr/local/bin syft

      # Step 6: Generate SBOM with Syft
      - name: Generate SBOM with Syft
        run: |
          syft dir:. -o cyclonedx-json > sbom.json

      # Step 7: Upload SBOM
      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.json

      # Step 8: Set up GitHub CLI Repository
      - name: Set up GitHub CLI Repository
        run: |
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo gpg --dearmor -o /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt-get update

      # Step 9: Install GitHub CLI and jq
      - name: Install GitHub CLI and jq
        run: |
          sudo apt-get install -y gh jq

      # Step 10: Generate SBOM attestation
      - name: Generate SBOM attestation
        uses: actions/attest-sbom@v1
        with:
          subject-path: ./sbom.json
          sbom-path: ./sbom.json

      # Step 11: Verify SBOM attestation
      - name: Verify SBOM attestation
        env:
          GH_TOKEN: ${{ secrets.CR_Password }}
        run: |
          gh attestation verify ./sbom.json --owner dheeman2912 --format=json | jq .

      # Step 12: Build Docker Image using Maven
      - name: Build Docker Image
        run: ./mvnw clean spring-boot:build-image -Dmaven.test.skip=true

      # Step 13: Log in to GitHub Container Registry
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # Step 14: Tag Docker Image
      - name: Tag Docker Image
        run: |
         docker tag docker.io/library/spring-petclinic:3.3.0-SNAPSHOT dheeman29/spring-petclinic:latest

      # Step 15: Push Docker Image
      - name: Push Docker Image
        run: |
          docker push dheeman29/spring-petclinic:latest

      # # Step 16: Run Trivy Vulnerability Scanner
      # - name: Run Trivy Vulnerability Scanner
      #   uses: aquasecurity/trivy-action@7b7aa264d83dc58691451798b4d117d53d21edfe
      #   with:
      #     image-ref: 'ghcr.io/dheeman2912/spring-petclinic:latest'
      #     format: 'template'
      #     template: '@/contrib/sarif.tpl'
      #     output: 'trivy-results.sarif'
      #     severity: 'CRITICAL,HIGH'

      # # Step 17: Upload Trivy Scan Results to GitHub Security Tab
      # - name: Upload Trivy Scan Results to GitHub Security Tab
      #   uses: github/codeql-action/upload-sarif@v3
      #   with:
      #     sarif_file: 'trivy-results.sarif'

      # Step 18: Install Cosign CLI
      - name: Install Cosign CLI
        run: |
          curl -sSL -o /usr/local/bin/cosign https://github.com/sigstore/cosign/releases/download/v2.2.3/cosign-linux-amd64
          chmod +x /usr/local/bin/cosign
          cosign version

      # # Step 19: Sign Docker Image
      # - name: Sign Docker Image
      #   run: |
      #     cosign sign --key env://COSIGN_KEY docker.io/dheeman29/spring-petclinic:latest --yes
      #   shell: bash
      #   env:
      #     COSIGN_KEY: ${{ secrets.COSIGN_KEY }}
      #     COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSPHRASE }}
